function removeFromArr(e,r,n){for(var t=e.length-1;t>=0;t--)"undefined"==typeof n?e[t]==r&&e.splice(t,1):e[t][n]==r&&e.splice(t,1)}function isDefined(){var e=arguments;if(0===e.length||"undefined"==typeof e[0])return!1;var r=e[0];for(var n in e)if("0"!==n){if(!r.hasOwnProperty(e[n]))return!1;if(r=r[e[n]],"undefined"==typeof r)return!1}return!0}!function(e,r){"use strict";e.module("script.core",[])}(angular,jQuery),function(e){"use strict";e.module("file.manager",["angular-loading-bar","angularFileUpload","ngCookies","ngResource","ngSanitize","ui.bootstrap","ui-notification","io.dennis.contextmenu"])}(angular),function(){"use strict";angular.module("app",["script.core","file.manager"])}(),function(e,r){"use strict";function n(e){var n=r("#settings");e.fireBroadcast=function(r,n){e.$broadcast(r,n)},e.baseUrl=function(){return n.data("base-url")}}e.module("file.manager").run(n),n.$inject=["$rootScope"]}(angular,jQuery),function(e,r){"use strict";function n(){return function(e,r,n){r.bind("keydown keypress",function(r){13===r.which&&(e.$apply(function(){e.$eval(n.cEnter,{event:r})}),r.preventDefault())})}}e.module("script.core").directive("cEnter",n)}(angular,jQuery),function(e,r){"use strict";function n(e){return function(r,n,t){n.on(t.cFocus,function(){e(t.cFocusSelector)}),r.$on("$destroy",function(){n.off(t.cFocus)})}}e.module("script.core").directive("cFocus",n)}(angular,jQuery),function(e,r){"use strict";function n(e,n){return function(e){n(function(){var n=r(e);1===n.length&&n.focus()})}}e.module("script.core").factory("focus",n),n.$inject=["$log","$timeout"]}(angular,jQuery),function(e,r){"use strict";function n(r){var n={support:!(!r.FileReader||!r.CanvasRenderingContext2D),isFile:function(n){return e.isObject(n)&&n instanceof r.File},isImage:function(e){var r="|"+e.type.slice(e.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(r)}};return{restrict:"A",template:"<canvas/>",link:function(e,r,t){function o(e){var r=new Image;r.onload=i,r.src=e.target.result}function i(){var e=a.width||this.width/this.height*a.height,r=a.height||this.height/this.width*a.width;l.attr({width:e,height:r}),l[0].getContext("2d").drawImage(this,0,0,e,r)}if(n.support){var a=e.$eval(t.cThumb);if(!n.isFile(a.file)||!n.isImage(a.file))return void r.hide();var l=r.find("canvas"),d=new FileReader;d.onload=o,d.readAsDataURL(a.file)}}}}e.module("script.core").directive("cThumb",n),n.$inject=["$window"]}(angular,jQuery),function(e,r){"use strict";function n(r,n,t,o,i,a){function l(){n.isDir=d,n.isDirUp=c,n._error=u,n._warning=f,n._success=m,n.manager={path:"/"},a.query(g)}function d(r){return r&&e.isDefined(r.type)&&"dir"===r.type}function c(e){return d(e)&&".."==e.name}function s(n){var t=!1;return e.isDefined(n.notification)&&(t=n.notification),e.isDefined(n.data)&&e.isDefined(n.data.notification)&&(t=n.data.notification),t?{hasMessage:!0,message:t}:(r.error("Cant get user friendly message from response",{response:n}),{hasMessage:!1})}function u(e){n.fireBroadcast("_error");var r=s(e);r.hasMessage&&o.error({message:r.message})}function f(e){n.fireBroadcast("_warning");var r=s(e);r.hasMessage&&o.error({message:r.message})}function m(e){var r=s(e);r.hasMessage&&o.success({message:r.message})}function g(e){r.log("BaseController -> onInitialDirLoaded",{response:e}),i.extend(e),n.fireBroadcast("tree-changed",e.dirs()),n.fireBroadcast("folder-changed",e.items()),r.log("FolderCache",{path:t.get("path")}),"/"!==t.get("path")&&"undefined"!=typeof t.get("path")&&n.fireBroadcast("change-folder",{path:t.get("path")})}r.log("BaseController controller <- started"),l()}e.module("file.manager").controller("BaseController",n),n.$inject=["$log","$scope","$cookies","Notification","DirService","Dir"]}(angular,jQuery),function(e,r){"use strict";function n(r,n,t,o,i,a,l){function d(){n.folder={loading:!0,creating:!1,name:"",items:[],filters:{image:!0,media:!0,document:!0,file:!0},order:{func:h,change:v,by:"name",reverse:!1,name:!0,size:!1,date:!1},enableCreate:w,create:C,refresh:F,isFiltersEnabled:y},n.folderFilter=p}function c(){return n.folder.loading?(r.warn("FolderController -> loading","Previous item still loading"),!1):!0}function s(e){n.folder.loading=!1}function u(e,t){c()&&(r.log("FolderController -> changeFolder",{event:e,folder:t}),n.folder.loading=!0,i.query({path:t.path||"/"},function(e){n._success(e),$(e,t)},n._error))}function f(e,t){r.log("FolderController -> onFolderExternallyChanged",{event:e,items:t}),n.folder.loading=!1,n.folder.items=t}function m(e,t){r.log("FolderController -> addNewFile",{event:e,file:t}),a.extendItem(t,n.folder.items.length),n.folder.items.unshift(t)}function g(e,t){r.log("FolderController -> removeByPath",{event:e,item:t,items:n.folder.items}),removeFromArr(n.folder.items,t.path,"path")}function p(r,t,o){if(e.isDefined(r.type)){if("dir"==r.type)return!0;if(y())return n.folder.filters[r.type];if(l.getType()==r.type)return!0}return!1}function h(e){return"dir"===e.type?".."==e.name?-1:"0 "+e[n.folder.order.by]:"z"+e[n.folder.order.by]}function v(e){n.folder.order.by=e;var r=["name","size","date"];for(var t in r)r.hasOwnProperty(t)&&(n.folder.order[r[t]]=!1);return n.folder.order[e]=!0,!1}function y(){return"file"==l.getType()}function F(){c()&&(r.log("FolderController -> refresh",{manager:n.manager}),n.folder.loading=!0,n.manager.path=n.manager.path.replace(/^\/|\/$/g,""),i.query({path:n.manager.path||"/"},function(e){$(e,n.manager)},n._error))}function $(e,o){r.log("FolderController -> changeFolder -> onFolderChanged",{response:e,folder:o}),a.extend(e),n.folder.items=e.items(),n.folder.loading=!1,n.manager.path="/"+(o.path||""),t.put("path",o.path||"")}function w(){n.folder.creating=!0,o("#create-dir-input")}function C(){c()&&n.folder.name&&""!==n.folder.name&&a.create(n.manager.path,n.folder.name,b,n._error)}function b(e){r.log("FolderController -> create -> onFolderCreated",{response:e}),n._success(e),n.folder.creating=!1,n.folder.name="";var t=e.data;a.extendItem(t,n.folder.items.length),n.folder.items.unshift(t),n.fireBroadcast("folder-created",t)}r.log("FolderController controller <- started"),d(),n.$on("_error",s),n.$on("_warning",s),n.$on("change-folder",u),n.$on("folder-changed",f),n.$on("file-uploaded",m),n.$on("folder-deleted",g),n.$on("file-deleted",g)}e.module("file.manager").controller("FolderController",n),n.$inject=["$log","$scope","$cookies","focus","Dir","DirService","Settings"]}(angular,jQuery),function(e,r,n,t,o){"use strict";function i(r,i,a,l,d,c){function s(){i.click=u,i.canRename=f,i.enableRename=m,i.disableRename=h,i.rename=g,i.select=F,i.hasThumbs=b,i.thumbName=D,i["delete"]=$}function u(e){return i.folder.loading?void r.warn("FolderItemController -> click","Previous item still loading"):(r.log("FolderItemController -> click",{item:e}),i.isDir(e)?void i.fireBroadcast("change-folder",e):void F(e))}function f(e){return!i.isDirUp(e)}function m(e){if(e.rename=!0,i.isDir(e))e.newName=e.name;else{e.ext=e.name.split(".").pop();var r=0;e.ext.length&&(r=e.ext.length+1),e.newName=e.name.substring(0,e.name.length-r)}a("#"+e.id+" input")}function g(){return i.isDir(i.item)?void(".."!=i.item.name&&l.rename(i.manager.path,i.item.name,i.item.newName,v,i._error)):void d.rename(i.manager.path,i.item.name,p(i.item),y,i._error)}function p(r){return e.isDefined(r.ext)&&r.ext.length?r.newName+"."+r.ext:r.newName}function h(e){e.rename=!1}function v(n){r.log("FolderItemController -> onFolderRenamed",{response:n,item:i.item}),i._success(n);var t=e.copy(i.item);i.item.rename=!1,i.item.path=n.data.path,i.item.name=n.data.name,i.item.url=n.data.url,i.fireBroadcast("folder-renamed",{"new":n.data,old:t})}function y(e){r.log("FolderItemController -> onFileRenamed",{response:e}),i._success(e),i.item.rename=!1,i.item.name=e.data.name,i.item.url=e.data.url,i.item.thumbs=e.data.thumbs}function F(e,o){var i=e.url;if(o&&(i=e.thumbs[o]),c.isTarget("tinyMCE"))if(r.info("FolderItemController -> select -> tinymce",{tinymce:n.tinymce}),n.tinymce.majorVersion<4){n.tinymce.activeEditor.windowManager.params.setUrl(i);var a=n.tinymce.activeEditor.windowManager.params.mce_window_id;n.tinymce.activeEditor.windowManager.close(a)}else r.info("FolderItemController -> select -> tinymce4",{params:n.tinymce.activeEditor.windowManager.getParams()}),n.tinymce.activeEditor.windowManager.getParams().setUrl(i),n.tinymce.activeEditor.windowManager.close();if(c.isTarget("callback")){var l=t.filemanager||t.parent.filemanager||{};l&&l.onSelected&&l.onSelected(i,c.getParams())}}function $(e){return i.isDir(e)?void(".."!=e.name&&l["delete"](i.manager.path,e.name,w,i._error)):void d["delete"](i.manager.path,e.name,C,i._error)}function w(e){r.log("FolderItemController -> onFolderDeleted",{response:e}),i._success(e),i.fireBroadcast("folder-deleted",e.data)}function C(e){r.log("FolderItemController -> onFileDeleted",{response:e}),i._success(e),i.fireBroadcast("file-deleted",e.data)}function b(r){return!!r&&e.isDefined(r.thumbs)&&o.keys(r.thumbs).length>1}function D(e,r,n){if(e){var t=c.getThumbSize(e);r=t[0],n=t[1]}var o="({width} x {height})",i={width:r,height:n};return o.supplant(i)}r.log("FolderItemController controller <- started"),s()}e.module("file.manager").controller("FolderItemController",i),i.$inject=["$log","$scope","focus","DirService","FileService","Settings"]}(angular,jQuery,top,window,Object),function(e,r){"use strict";function n(r,n,t,o){function i(){n.isOpen=u,n.isEmpty=f,n.changeFolder=g,n.tree={loading:!0,items:[],root:{name:"/",url:n.baseUrl+"dir"},expand:m}}function a(e){n.tree.loading=!1}function l(e,t){r.log("TreeController -> treeChanged",{event:e,tree:t}),n.tree.items=t,n.tree.loading=!1}function d(e,t){r.log("TreeController -> onFolderCreated",{event:e,folder:t}),-1===t.path.indexOf("/")&&n.tree.items.unshift(t)}function c(e,t){var o=t.old,i=t["new"];r.log("TreeController -> onFolderRenamed",{event:e,newFolder:i,oldFolder:o});for(var a=0;a<n.tree.items.length;a++)n.tree.items[a].path==o.path&&(n.tree.items[a].path=i.path,n.tree.items[a].name=i.name,n.tree.items[a].url=i.url)}function s(e,t){r.log("TreeController -> removeByPath",{event:e,item:t,items:n.tree.items}),removeFromArr(n.tree.items,t.path,"path")}function u(r){return r&&e.isDefined(r.folders)}function f(e){return u(e)?0==e.folders.length:!1}function m(e){return n.tree.loading||f(e)?void r.warn("TreeController -> expand","Previous item still loading"):(r.log("TreeController -> expand",{curr:e}),u(e)?void(e.folders=void 0):(n.tree.loading=!0,void t.query({path:e.path},function(r){o.extend(r),n.tree.loading=!1,e.folders=r.dirs()},n._error)))}function g(e){n.fireBroadcast("change-folder",e)}r.log("TreeController controller <- started"),i(),n.$on("_error",a),n.$on("_warning",a),n.$on("tree-changed",l),n.$on("folder-created",d),n.$on("folder-renamed",c),n.$on("folder-deleted",s)}e.module("file.manager").controller("TreeController",n),n.$inject=["$log","$scope","Dir","DirService"]}(angular,jQuery),function(e,r){"use strict";function n(r,n,t){function o(){n.uploader=new t({url:i})}function i(){return n.baseUrl()+"file/upload"+n.manager.path}r.log("UploadController controller <- started"),o(),n.uploader.onWhenAddingFileFailed=function(e,n,t){r.info("onWhenAddingFileFailed",e,n,t)},n.uploader.onAfterAddingFile=function(e){e.uploader.url=e.url=i(),r.info("onAfterAddingFile",e)},n.uploader.onErrorItem=function(e,n,t,o){r.info("onErrorItem",e,t,o)},n.uploader.onCompleteItem=function(e,t,o,i){200===o&&(r.info("UploadController -> uploader -> onCompleteItem",{fileItem:e,response:t,status:o,headers:i}),n.fireBroadcast("file-uploaded",t),n._success(t))},n.uploader.onCompleteAll=function(){r.info("UploadController -> uploader -> onCompleteAll",{uploader:n.uploader});var t=!1;e.forEach(n.uploader.queue,function(e){e.isReady||e.isUploading||e.isSuccess||(t=!0)}),t||n.uploader.clearQueue()}}e.module("file.manager").controller("UploadController",n),n.$inject=["$log","$scope","FileUploader"]}(angular,jQuery),function(e,r){"use strict";function n(e,r,n){return e.log("Dir resource <- started"),r(n.baseUrl()+"dir/:path",{path:"@path"})}e.module("file.manager").service("Dir",n),n.$inject=["$log","$resource","$rootScope"]}(angular,jQuery),function(e,r){"use strict";function n(r,n,t){function o(r){e.isDefined(r.DirServiceExtended)&&r.DirServiceExtended||(e.extend(r,{dirs:function(){var n=[];return e.forEach(r,function(e,r){"dir"==e.type&&".."!=e.name&&(c(e,r),this.push(e))},n),n},items:function(){var n=[];return e.forEach(r,function(e,r){c(e,r),this.push(e)},n),n}}),r.DirServiceExtended=!0)}function i(e,r,o,i,a){var l=n.baseUrl()+"dir/rename/"+e;t.post(l,{old:r,"new":o}).then(i,a)}function a(e,r,o,i){var a=n.baseUrl()+"dir/create/"+e;t.post(a,{name:r}).then(o,i)}function l(e,r,o,i){var a=n.baseUrl()+"dir/delete/"+e;t.post(a,{name:r}).then(o,i)}function d(e){return"list-item-"+e}function c(e,r){e.id=d(r)}return r.log("DirService service <- started"),{extend:o,extendItem:c,rename:i,create:a,"delete":l,idGen:d}}e.module("file.manager").service("DirService",n),n.$inject=["$log","$rootScope","$http"]}(angular,jQuery),function(e,r){"use strict";function n(e,r,n){function t(t,o,i,a,l){e.log("FileService -> rename",{path:t,oldName:o,newName:i});var d=r.baseUrl()+"file/rename/"+t;n.post(d,{old:o,"new":i}).then(a,l)}function o(t,o,i,a){e.log("FileService -> delete",{path:t,name:o});var l=r.baseUrl()+"file/delete/"+t;n.post(l,{name:o}).then(i,a)}return e.log("FileService service <- started"),{rename:t,"delete":o}}e.module("file.manager").service("FileService",n),n.$inject=["$log","$rootScope","$http"]}(angular,jQuery),function(e,r){"use strict";function n(){function n(e){return a().target.toLowerCase()===e.toLowerCase()}function t(){return(a().type?d.type.toLowerCase():!1)||"file"}function i(r){var n=e.fromJson(l.data("sizes").replace(/\'/g,'"'));return n[r]}function a(){if(!d){var e=l.data("params");if(0===e.length)return{};d=o(e)}return d}var l=r("#settings"),d=!1;return{isTarget:n,getType:t,getThumbSize:i,getParams:a}}function t(e){return e.replace(/\'/g,'"')}function o(r){return e.fromJson(t(r))}e.module("file.manager").service("Settings",n),n.$inject=[]}(angular,jQuery);
//# sourceMappingURL=data:application/json;base64,
