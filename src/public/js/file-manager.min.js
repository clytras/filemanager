!function(e,n){"use strict";n.filemanager=e.module("crip.file-manager",["crip.core","angular-loading-bar","angularFileUpload","ngCookies","ngResource","ngSanitize","ui.bootstrap","ui-notification","io.dennis.contextmenu"])}(angular,window.crip||(window.crip={})),function(e,n,t){"use strict";function i(t){function i(e,n){t.$broadcast(e,n)}function r(n,t,i){var r=n+"/";return e.isDefined(i)&&(r+=i+"/"),r+=t,a(r)}function a(e){return u+e}function o(){return l}var c=n("#settings"),u=c.data("base-url"),l=JSON.parse(c.data("sizes").replaceAll("'",'"'));t.fireBroadcast=i,t.baseUrl=a,t.imgSizes=o,t.dirUrl=function(e,n){return r("dir",e,n)},t.fileUrl=function(e,n){return r("file",e,n)}}t.filemanager.run(i),i.$inject=["$rootScope"]}(angular,jQuery,window.crip||(window.crip={})),function(e,n,t){"use strict";function i(n,t,i,r,a,o){function c(){n.canDeleteSelected=u,n.deleteSelected=l,n.canCreateFolder=s,n.createFolder=m,n.canRenameSelected=d,n.enableRenameSelected=f,n.canOpenSelected=p,n.openSelected=g,n.hasProperties=_,n.openProperties=v}function u(){return r.canDelete(a.getSelectedItem())}function l(n){e.isDefined(n)&&e.isDefined(n.stopPropagation)&&n.stopPropagation(),r["delete"](a.getSelectedItem()),a.deselect()}function s(){return r.canCreateFolder()}function m(e){r.createFolder(e,f)}function d(){return r.canRename(a.getSelectedItem())}function f(n){var t=a.getSelectedItem();e.isDefined(n)&&e.isDefined(n.stopPropagation)&&n.stopPropagation(),t&&(r.enableRename(t),i('#{identifier} input[name="name"]'.supplant(t)))}function p(){return a.getSelectedItem().isDir}function g(){p()&&o.change(a.getSelectedItem())}function _(){var e=a.getSelectedItem();return e&&!e.isDirUp}function v(e){_()&&(e.stopPropagation(),t.open({animation:!0,templateUrl:"item-properties-modal.html",controller:"ItemPropertiesController",size:"lg",resolve:{item:function(){return a.getSelectedItem()}}}))}c()}t.filemanager.controller("ActionsController",i),i.$inject=["$scope","$uibModal","focus","CripManagerActions","CripManagerContent","CripManagerLocation"]}(angular,jQuery,window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n,t){function i(){e.goTo=r,e.goToRoot=a,e.breadcrumbHasItems=o,e.getBreadcrumbItems=c}function r(e){t.change(e)}function a(){r()}function o(){return n.hasItems()}function c(){return n.items}i()}n.filemanager.controller("BreadcrumbController",t),t.$inject=["$scope","CripManagerBreadcrumb","CripManagerLocation"]}(angular,window.crip),function(e,n){"use strict";function t(e,n,t){function i(){n.folderFilter=a,n.order={by:r,field:"full_name",isReverse:!1,full_name:!0,size:!1,date:!1},n.filters={image:!0,media:!0,document:!0,file:!0},n.getContent=function(){return t.get()}}function r(e){var t="z {field}";if(e.isDir){if(e.isDirUp)return-1;t="0 {field}"}return t.supplant({field:e[n.order.field]})}function a(e,t,i){return e.isDir?!0:n.filters[e.type]}i()}n.filemanager.controller("DirContentController",t),t.$inject=["$log","$scope","CripManagerContent"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n,t,i,r,a){function o(){n.click=c,n.dblclick=u,n.isSelected=l,n.enableRename=s}function c(e,n){e.stopPropagation(),i.updateSelected(),i.deselect(),i.selectSingle(n)}function u(n,t){n.stopPropagation(),e.info("dblclick",t),t.isDir&&r.change(t)}function l(e){return i.isSelected(e)}function s(e){e.stopPropagation();var n=i.getSelectedItem();a.enableRename(n),t('#{identifier} input[name="name"]'.supplant(n))}o()}n.filemanager.controller("ItemController",t),t.$inject=["$log","$scope","focus","CripManagerContent","CripManagerLocation","CripManagerActions"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(n,t,i,r,a){function o(){n.info(a),t.item=u(a),t.thumb=a.thumb,t.name=a.full_name,t.close=c}function c(){i.close()}function u(e){return e.isDir?s(e):m(e)}function l(e,n){e.push({name:r("item_properties_modal_item_type"),value:r("item_properties_modal_file_type_"+n.type)},{name:r("item_properties_modal_name"),value:n.full_name},{name:r("item_properties_modal_date"),value:n.date},{name:r("item_properties_modal_size"),value:n.getSize()})}function s(e){var n=[];return l(n,e),n}function m(n){var i=[];return l(i,n),""!==n.dir&&i.push({name:r("item_properties_modal_item_dir"),value:n.dir}),i.push({name:r("item_properties_modal_item_extension"),value:n.ext}),"image"===n.type?(i.push({name:r("item_properties_modal_item_url"),value:'<a href="{url}" target="_blank">{title}</a>'.supplant({url:n.url,title:r("item_properties_modal_size_dim").supplant(n.dimensions)})}),e.forEach(t.imgSizes(),function(e,t){i.push({name:r("item_properties_modal_size_url_title").supplant({size:r("item_properties_modal_size_key_"+t)}),value:'<a href="{url}?thumb={size}" target="_blank">{title}</a>'.supplant({url:n.url,size:t,title:r("item_properties_modal_size_dim").supplant(e)})})})):i.push({name:r("item_properties_modal_item_url"),value:'<a href="{url}" target="_blank">{full_name}</a>'.supplant(n)}),i}o()}n.filemanager.controller("ItemPropertiesController",t),t.$inject=["$log","$scope","$uibModalInstance","CripManagerTrans","item"]}(angular,window.crip),function(e,n){"use strict";function t(e,n,t,i){function r(){i().init(),n.init(),e.deselect=a}function a(){t.deselect()}r()}n.filemanager.controller("RootController",t),t.$inject=["$scope","CripManagerLocation","CripManagerContent","CripManagerTrans"]}(angular,window.crip||(window.crip={})),function(e){"use strict";function n(e,n){return e(n.dirUrl(":dir/:name"),{dir:"@dir",name:"@name"},{create:{url:n.dirUrl(":dir/:name","create"),method:"POST"},deleteDir:{url:n.dirUrl(":dir","delete"),method:"GET"},deleteFile:{url:n.fileUrl(":dir/:name","delete"),method:"GET"},renameDir:{url:n.dirUrl(":dir","rename"),method:"GET"},renameFile:{url:n.fileUrl(":dir","rename"),method:"GET"}})}e.filemanager.service("Dir",n),n.$inject=["$resource","$rootScope"]}(window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n){return e(n.baseUrl("translations"))}n.filemanager.service("CripManagerTranslations",t),t.$inject=["$resource","$rootScope"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,i){var r={};return e.extend(r,n,t,i),r}n.filemanager.service("CripManagerActions",t),t.$inject=["CreateFolderService","DeleteService","RenameService"]}(angular,window.crip),function(e,n){"use strict";function t(){function n(){return 0===a.items.length?{dir:"",name:""}:a.items[a.items.length-1]}function t(){return!!a.items.length}function i(e){r({dir:e.dir,name:e.name})}function r(n){var t=n.dir||"";a.items.splice(0,a.items.length),""!==n.name&&null!==n.name&&(t+="/"+n.name),e.forEach(t.split("/"),function(e){if(""!==e&&null!==e){var n="";a.items.length>0&&(n=1===a.items.length?a.items[0].name:"{dir}/{name}".supplant(a.items[a.items.length-1])),a.items.push({name:e,dir:n,isActive:!1})}}),a.items.length>0&&(a.items[a.items.length-1].isActive=!0)}var a={items:[],hasItems:t,current:n,set:i};return a}n.filemanager.service("CripManagerBreadcrumb",t),t.$inject=[]}(angular,window.crip),function(e,n){"use strict";function t(n,t){function i(){return c.items}function r(){c.items.splice(0,c.items.length)}function a(t){e.isDefined(t.is_extended)||n.extendItem(t),c.items.push(t)}function o(e){c.items.splice(c.items.indexOf(e),1)}var c={items:[],get:i,add:a,remove:o,removeItems:r};return e.extend(c,t),c}n.filemanager.service("CripManagerContent",t),t.$inject=["ItemService","SelectService"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,i){function r(n){e.extend(n,{getItems:function(){var t=[];return e.forEach(n,function(e,n){l(e,n),this.push(e)},t),t}})}function a(e){return"list-item-"+e}function o(e){return e.substring(10)}function c(n){return n&&e.isDefined(n.type)&&"dir"===n.type}function u(e){return c(e)&&(""==e.name||null==e.name)}function l(n,t){e.extend(n,{is_extended:!0,rename:!1,identifier:a(t),isDir:c(n),isDirUp:u(n),update:s,"delete":f,getFullName:m,saveNewName:d,getSize:p})}function s(){return this.rename&&this.saveNewName(),this}function m(){return this.isDir||""===this.ext?this.name:"{name}.{ext}".supplant(this)}function d(){var n=this,t=o(n.identifier);if(n.rename=!1,n.full_name!==n.getFullName()){var i=n.isDir?"$renameDir":"$renameFile";n[i]({old:n.full_name,"new":n.getFullName()},function(i){e.extend(n,l(i,t))})}}function f(){var e=this.isDir?"$deleteDir":"$deleteFile";this[e]({name:this.full_name})}function p(){return this.size.toBytes()}return{extend:r,extendItem:l}}n.filemanager.service("ItemService",t),t.$inject=["$log","$rootScope","CripManagerTrans"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(n,t,i,r,a){function o(){c(u())}function c(n){var o={dir:null,name:null};e.isDefined(n)&&(o.dir=e.isEmpty(n.dir)?null:n.dir,o.name=e.isEmpty(n.name)?null:n.name),t.query(o,function(n){l(o),i.extend(n),a.removeItems(),a.deselect(),r.set(o),e.forEach(n.getItems(),function(e){a.add(e)})})}function u(){var t={dir:null,name:null},i=n.get("location-dir"),r=n.get("location-dir-name");return(e.hasValue(i)||e.hasValue(r))&&(t.dir=i,r&&"null"!==r&&null!==r||(r=""),t.name=r),t}function l(e){n.put("location-dir",e.dir||""),n.put("location-dir-name",e.name||"")}return{init:o,change:c,current:{}}}n.filemanager.service("CripManagerLocation",t),t.$inject=["$cookies","Dir","ItemService","CripManagerBreadcrumb","CripManagerContent"]}(angular,window.crip),function(e,n){"use strict";function t(e){var n={};return function(t){return t?n[t]:{init:function(){n=e.get()}}}}n.filemanager.service("CripManagerTrans",t),t.$inject=["CripManagerTranslations"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,i,r){function a(){return!c._createInProgress}function o(r,o){return a()?(c._createInProgress=!0,void n.create(t.current(),{name:r},function(n){c._createInProgress=!1,i.add(n),i.selectSingle(n),e.isDefined(o)&&e.isFunction(o)&&o(n)})):!1}var c={_createInProgress:!1,canCreateFolder:a,createFolder:o};return c}n.filemanager.service("CreateFolderService",t),t.$inject=["Dir","CripManagerBreadcrumb","CripManagerContent","RenameService"]}(angular,window.crip),function(e,n){"use strict";function t(){function e(e){return e?!e.isDirUp:!1}function n(n){return e(n)?n["delete"]():!1}return{canDelete:e,"delete":n}}n.filemanager.service("DeleteService",t)}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(){function e(e){return e?!e.isDirUp:!1}function n(n){return e(n)?n.rename=!0:!1}function t(n){return e(n)?n.update():!1}return{canRename:e,enableRename:n,rename:t}}n.filemanager.service("RenameService",t)}(angular,window.crip),function(e,n){"use strict";function t(){function n(){return!!s.selected.length}function t(t){if(!n())return!1;var i=!1;return e.forEach(s.selected,function(n){e.equals(t,n)&&(i=!0)}),i}function i(){return 1===s.selected.length}function r(){return i()?s.selected[0]:!1}function a(){return s.selected}function o(e){s.selected.push(e)}function c(){l(),s.selected.splice(0,s.selected.length)}function u(e){c(),o(e)}function l(){e.forEach(a(),function(e){e.update()})}var s={selected:[],select:o,selectSingle:u,deselect:c,isSelected:t,isSelectedOne:i,isSelectedAny:n,getSelectedItem:r,getSelectedItems:a,updateSelected:l};return s}n.filemanager.service("SelectService",t)}(angular,window.crip);
//# sourceMappingURL=data:application/json;base64,
