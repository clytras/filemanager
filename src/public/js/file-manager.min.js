!function(i,n){"use strict";n.filemanager=i.module("crip.file-manager",["crip.core","angular-loading-bar","angularFileUpload","ngCookies","ngResource","ngSanitize","ui.bootstrap","ui-notification","io.dennis.contextmenu"])}(angular,window.crip||(window.crip={})),function(i,n,e){"use strict";function r(e){function r(i,n){e.$broadcast(i,n)}function o(i){return t.data("base-url")+i}var t=n("#settings");e.fireBroadcast=r,e.baseUrl=o,e.dirUrl=function(n,e){var r="dir/";return i.isDefined(e)&&(r+=e+"/"),r+=n,o(r)}}e.filemanager.run(r),r.$inject=["$rootScope"]}(angular,jQuery,window.crip||(window.crip={})),function(i,n){"use strict";function e(i,n,e){function r(){i.folderFilter=t,i.order={by:o,field:"name",isReverse:!1,name:!0,size:!1,date:!1},i.filters={image:!0,media:!0,document:!0,file:!0}}function o(n){var e="z {field}";if(n.isDir){if(n.isDirUp)return-1;e="0 {field}"}return e.supplant({field:n[i.order.field]})}function t(n,e,r){return n.isDir?!0:i.filters[n.type]}r()}n.filemanager.controller("DirContentController",e),e.$inject=["$scope","focus","Dir"]}(angular,window.crip||(window.crip={})),function(i,n){"use strict";function e(i){function n(){i.click=e}function e(n){n.isDir&&i.folder.goTo(n)}n()}n.filemanager.controller("DirItemController",e),e.$inject=["$scope"]}(angular,window.crip||(window.crip={})),function(i,n){"use strict";function e(n,e,r,o,t,a){function c(){e.folder={loading:!0,items:[],manager:f(),goTo:u},u(e.folder.manager)}function u(n,e){t.query(n,function(r){if(a.extend(r),l(r),i.isDefined(e))if(i.isArray(e))i.forEach(e,function(n){if(!i.isFunction(n))throw new Error("To change folder, you should pass an array of callbacks!");n(r)});else{if(!i.isFunction(e))throw new Error("To change folder, you should pass an array of callbacks or single callback!");e(r)}s(n)})}function f(e){e=i.isDefined(e)?e:{dir:"",name:""};var o=r.get("manager-dir"),t=r.get("manager-dir-name");return i.isDefined(o)&&""!=o&&(e.dir=o,t&&"null"!==t||(t=""),e.name=t),n.debug({getManagerCookieOrDefault:e}),e}function l(i){e.folder.items=i.getItems(),e.folder.loading=!1}function s(i){r.put("manager-dir",i.dir||""),r.put("manager-dir-name",i.name||""),e.folder.manager=i}c()}n.filemanager.controller("RootController",e),e.$inject=["$log","$scope","$cookies","Notification","Dir","DirResponseService"]}(angular,window.crip||(window.crip={})),function(i){"use strict";function n(i,n){return i(n.dirUrl(":dir/:name"),{dir:"@dir",name:"@name"})}i.filemanager.service("Dir",n),n.$inject=["$resource","$rootScope"]}(window.crip||(window.crip={})),function(i,n){"use strict";function e(n){function e(n){i.extend(n,{getItems:function(){var e=[];return i.forEach(n,function(i,n){a(i,n),this.push(i)},e),e}})}function r(i){return"list-item-"+i}function o(n){return n&&i.isDefined(n.type)&&"dir"===n.type}function t(i){return o(i)&&""==i.name}function a(i,n){i.identifier=r(n),i.isDir=o(i),i.isDirUp=t(i)}return{extend:e,extendItem:a}}n.filemanager.service("DirResponseService",e),e.$inject=["$rootScope"]}(angular,window.crip||(window.crip={}));
//# sourceMappingURL=data:application/json;base64,
