!function(e,n){"use strict";n.filemanager=e.module("crip.file-manager",["crip.core","crip.transparent-progressbar","angular-loading-bar","ngFileUpload","ngCookies","ngResource","ngSanitize","ngMaterial"])}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(){}n.filemanager.config(t),t.$inject=[]}(angular,window.crip||(window.crip={})),function(e,n,t){"use strict";function r(t){function r(e,n){t.$broadcast(e,n)}function i(n,t,r){var i=n+"/";return e.isDefined(r)&&(i+=r+"/"),i+=t,a(i)}function a(e){return s+e}function o(){return f}function c(){return d}function u(e,n){var t={url:c(),name:e,ext:n||"html"};return"{url}/templates/{name}.{ext}".supplant(t)}var l=n("#settings"),s=l.data("base-url"),d=l.data("public-url"),f=JSON.parse(l.data("sizes").replaceAll("'",'"'));t.fireBroadcast=r,t.baseUrl=a,t.publicUrl=c,t.imgSizes=o,t.templatePath=u,t.dirUrl=function(e,n){return i("dir",e,n)},t.fileUrl=function(e,n){return i("file",e,n)}}t.filemanager.run(r),r.$inject=["$rootScope"]}(angular,jQuery,window.crip||(window.crip={})),function(e,n,t){"use strict";function r(n,t,r,i,a,o,c,u,l){function s(){n.canDeleteSelected=d,n.deleteSelected=f,n.canCreateFolder=p,n.createFolder=m,n.canRenameSelected=g,n.enableRenameSelected=h,n.canOpenSelected=v,n.openSelected=_,n.hasProperties=w,n.openProperties=C,n.canUpload=$,n.hasUploads=S,n.addFiles=M,n.upload=D,n.cancelUpload=b,n.order=l}function d(){return i.canDelete(a.getSelectedItem())}function f(n){e.isDefined(n)&&e.isDefined(n.stopPropagation)&&n.stopPropagation(),i["delete"](a.getSelectedItem()),a.deselect()}function p(){return i.canCreateFolder()}function m(e){i.createFolder(e,h)}function g(){return i.canRename(a.getSelectedItem())}function h(n){t.hide();var o=a.getSelectedItem();e.isDefined(n)&&e.isDefined(n.stopPropagation)&&n.stopPropagation(),o&&(i.enableRename(o),r('#{identifier} input[name="name"]'.supplant(o)))}function v(){return a.getSelectedItem().isDir}function _(){v()&&o.change(a.getSelectedItem())}function w(){return a.hasProperties(a.getSelectedItem())}function C(e){w()&&(e.stopPropagation(),u.open(a.getSelectedItem()))}function $(){return!0}function S(){return c.hasFiles()}function M(e){c.add(e)}function D(){c.start()}function b(){c.clean()}s()}t.filemanager.controller("ActionsController",r),r.$inject=["$scope","$mdMenu","focus","CripManagerActions","CripManagerContent","CripManagerLocation","CripManagerUploader","CripPropertiesModal","CripManagerContentOrder"]}(angular,jQuery,window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n,t){function r(){e.goTo=i,e.goToRoot=a,e.breadcrumbHasItems=o,e.getBreadcrumbItems=c}function i(e){t.change(e)}function a(){i()}function o(){return n.hasItems()}function c(){return n.items}r()}n.filemanager.controller("BreadcrumbController",t),t.$inject=["$scope","CripManagerBreadcrumb","CripManagerLocation"]}(angular,window.crip),function(e,n){"use strict";function t(e,n,t,r){function i(){n.folderFilter=a,n.order=r,n.filters={image:!0,media:!0,document:!0,file:!0},n.getContent=function(){return t.get()}}function a(e,t,r){return e.isDir?!0:n.filters[e.type]}i()}n.filemanager.controller("DirContentController",t),t.$inject=["$log","$scope","CripManagerContent","CripManagerContentOrder"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n){function t(){e.hasUploads=r,e.files=i}function r(){return n.hasFiles()}function i(){return n.files}t()}n.filemanager.controller("FileUploadController",t),t.$inject=["$scope","CripManagerUploader"]}(angular,window.crip),function(e,n){"use strict";function t(e,n,t,r,i,a,o,c){function u(){n.click=l,n.dblclick=s,n.isSelected=d,n.enableRename=f,n.canDelete=p,n.deleteItem=m,n.hasProperties=g,n.openProperties=h,n.openMenu=v,n.canOpen=_,n.openDir=w,n.canRename=C}function l(e,n){e.stopPropagation(),i.updateSelected(),i.deselect(),i.selectSingle(n),t.hide()}function s(e,n){e.stopPropagation(),n.isDir&&a.change(n)}function d(e){return i.isSelected(e)}function f(e){e.stopPropagation&&e.stopPropagation(),t.hide();var n;e.is_extended?(n=e,i.selectSingle(n)):n=i.getSelectedItem(),o.enableRename(n),r('#{identifier} input[name="name"]'.supplant(n))}function p(e){return o.canDelete(e)}function m(e){o["delete"](e)}function g(e){return i.hasProperties(e)}function h(e){c.open(e)}function v(e,n){t.hide().then(function(){e.menu.$mdOpenMenu(n)})}function _(e){return e.isDir}function w(e){_(e)&&a.change(e)}function C(e){return!e.isDirUp}u()}n.filemanager.controller("ItemController",t),t.$inject=["$log","$scope","$mdMenu","focus","CripManagerContent","CripManagerLocation","CripManagerActions","CripPropertiesModal"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(n,t,r,i,a){function o(){n.info(a),t.item=u(a),t.thumb=a.thumb,t.name=a.full_name,t.close=c}function c(){r.hide()}function u(e){return e.isDir?s(e):d(e)}function l(e,t){n.log("item_properties_modal_file_type_"+t.type),e.push({name:i("item_properties_modal_item_type"),value:i("item_properties_modal_file_type_"+t.type)},{name:i("item_properties_modal_name"),value:t.full_name},{name:i("item_properties_modal_date"),value:t.updated_at},{name:i("item_properties_modal_size"),value:t.getSize()})}function s(e){var n=[];return l(n,e),n}function d(n){var t=[];return l(t,n),""!==n.dir&&t.push({name:i("item_properties_modal_item_dir"),value:n.dir}),t.push({name:i("item_properties_modal_item_extension"),value:n.extension}),"image"===n.type&&e.hasValue(n.thumbs)?(t.push({name:i("item_properties_modal_item_url"),value:'<a href="{url}" target="_blank">{title}</a>'.supplant({url:n.url,title:i("item_properties_modal_size_dim").supplant(n.size)})}),e.forEach(n.thumbs,function(e,n){t.push({name:i("item_properties_modal_size_url_title").supplant({size:i("item_properties_modal_size_key_"+n)}),value:'<a href="{url}" target="_blank">{title}</a>'.supplant({url:e.url,title:i("item_properties_modal_size_dim").supplant(e.size)})})})):t.push({name:i("item_properties_modal_item_url"),value:'<a href="{url}" target="_blank">{full_name}</a>'.supplant(n)}),t}o()}n.filemanager.controller("ItemPropertiesController",t),t.$inject=["$log","$scope","$mdDialog","CripManagerTrans","item"]}(angular,window.crip),function(e,n){"use strict";function t(e,n,t,r,i,a){function o(){i().init(),t.init(),e.deselect=c,e.refreshContent=u}function c(){r.deselect(),n.hide()}function u(){t.change(a.current())}o()}n.filemanager.controller("RootController",t),t.$inject=["$scope","$mdMenu","CripManagerLocation","CripManagerContent","CripManagerTrans","CripManagerBreadcrumb"]}(angular,window.crip||(window.crip={})),function(e){"use strict";function n(e,n){return e(n.dirUrl(":dir/:name"),{dir:"@dir",name:"@name"},{create:{url:n.dirUrl(":dir/:name","create"),method:"POST"},deleteDir:{url:n.dirUrl(":dir","delete"),method:"GET"},deleteFile:{url:n.fileUrl(":dir/:name","delete"),method:"GET"},renameDir:{url:n.dirUrl(":dir","rename"),method:"GET"},renameFile:{url:n.fileUrl(":dir","rename"),method:"GET"}})}e.filemanager.service("Dir",n),n.$inject=["$resource","$rootScope"]}(window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n){return e(n.baseUrl("translations"))}n.filemanager.service("CripManagerTranslations",t),t.$inject=["$resource","$rootScope"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,r){var i={};return e.extend(i,n,t,r),i}n.filemanager.service("CripManagerActions",t),t.$inject=["CreateFolderService","DeleteService","RenameService"]}(angular,window.crip),function(e,n){"use strict";function t(n,t){function r(){return 0===f.items.length?{dir:"",name:""}:f.items[f.items.length-1]}function i(){return!!f.items.length}function a(e){o({dir:e.dir,name:e.name})}function o(n){var t=d.apply(n);f.items.splice(0,f.items.length),c(t),e.forEach(t.split("/").clean("",null),function(e){var n="";f.items.length>0&&(n=1===f.items.length?f.items[0].name:"{dir}/{name}".supplant(f.items[f.items.length-1])),f.items.push({name:e,dir:n,isActive:!1})}),f.items.length>0&&(f.items[f.items.length-1].isActive=!0)}function c(t){f.urlChangeIgnore=!0;var r="string"==typeof t?t.split("/"):t;r.clean(),r.length>0&&e.hasValue(r[0])?n.search("l",r):n.search("l",null),f.urlChangeIgnore=!1}function u(){return n.search()}function l(n,r){f.urlChangeIgnore||e.equals(n,r)||t.fireBroadcast("url-change",[s(n)])}function s(n){var t=null;return e.hasValue(n.l)&&(t=n.l,"object"==typeof t&&(t=t.join("/"))),t}function d(e){return this.dir=this.dir||"",this.name=this.name||"",e="{dir}/{name}".supplant(this),e.split("/").clean().join("/")}var f={items:[],hasItems:i,current:r,set:a,urlChangeIgnore:!1,resolveUrlObject:s,toString:d};return t.$watch(u,l),f}n.filemanager.service("CripManagerBreadcrumb",t),t.$inject=["$location","$rootScope"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,r){function i(){return l.items}function a(){l.items.splice(0,l.items.length)}function o(t){return e.isDefined(t.is_extended)||n.extendItem(t),"Dir"!=typeof t&&(t=new r(t)),l.items.push(t),t}function c(e){l.items.splice(l.items.indexOf(e),1)}function u(e){return e?!e.isDirUp:!1}var l={items:[],get:i,add:o,remove:c,removeItems:a,hasProperties:u};return e.extend(l,t),l}n.filemanager.service("CripManagerContent",t),t.$inject=["ItemService","SelectService","Dir"]}(angular,window.crip),function(e,n){"use strict";function t(e){function n(e){var n="z {field}";if(e.isDir){if(e.isDirUp)return-1;n="0 {field}"}return n.supplant({field:e[i.field]})}function t(e){return-1!==a.indexOf(e)?!!i[e]:!1}function r(e){if(-1!==a.indexOf(e)){for(var n in a)a.hasOwnProperty(n)&&a[n]!=e&&(i[a[n]]=!1);i.field=e,i[e]?i.isReverse=!i.isReverse:i[e]=!0}}var i={by:n,isBy:t,set:r,field:"full_name",isReverse:!1,full_name:!0,bytes:!1,updated_at:!1},a=["full_name","bytes","updated_at"];return i}n.filemanager.service("CripManagerContentOrder",t),t.$inject=["$log"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,r){function i(n){e.extend(n,{getItems:function(){var t=[];return e.forEach(n,function(e,n){l(e,n),this.push(e)},t),t}})}function a(e){return"list-item-"+e}function o(e){return e.substring(10)}function c(n){return n&&e.isDefined(n.type)&&"dir"===n.type}function u(e){return c(e)&&(""==e.name||null==e.name)}function l(n,t){e.extend(n,{is_extended:!0,rename:!1,identifier:a(t),isDir:c(n),isDirUp:u(n),update:s,"delete":p,getFullName:d,saveNewName:f,getSize:m})}function s(){return this.rename&&this.saveNewName(),this}function d(){return this.isDir||""===this.extension?this.name:"{name}.{extension}".supplant(this)}function f(){var n=this,t=o(n.identifier),r=n.menu;if(n.rename=!1,n.full_name!==n.getFullName()){var i=n.isDir?"$renameDir":"$renameFile";n[i]({old:n.full_name,"new":n.getFullName()},function(i){e.extend(n,l(i,t),{menu:r})})}}function p(){var e=this.isDir?"$deleteDir":"$deleteFile";this[e]({name:this.full_name})}function m(){return this.bytes.toBytes()}return{extend:i,extendItem:l}}n.filemanager.service("ItemService",t),t.$inject=["$log","$rootScope","CripManagerTrans"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(n,t,r,i,a,o,c){function u(){l(s())}function l(n){var t={dir:null,name:null};e.isDefined(n)&&(t.dir=e.isEmpty(n.dir)?null:n.dir,t.name=e.isEmpty(n.name)?null:n.name),i.query(t,function(n){d(t),a.extend(n),c.removeItems(),c.deselect(),o.set(t),e.forEach(n.getItems(),function(e){c.add(e)})})}function s(){var r={dir:null,name:null},i=o.resolveUrlObject(t.search());if(e.hasValue(i))return r.dir=i,r;var a=n.get("location-dir"),c=n.get("location-dir-name");return(e.hasValue(a)||e.hasValue(c))&&(r.dir=a,e.isEmpty(c)&&(c=""),r.name=c),r}function d(e){n.put("location-dir",e.dir||""),n.put("location-dir-name",e.name||"")}return r.$on("url-change",function(e,n){l({dir:n[0]})}),{init:u,change:l,current:{}}}n.filemanager.service("CripManagerLocation",t),t.$inject=["$cookies","$location","$rootScope","Dir","ItemService","CripManagerBreadcrumb","CripManagerContent"]}(angular,window.crip),function(e,n){"use strict";function t(e,n,t){function r(r){return t.hasProperties(r)?void e.show({clickOutsideToClose:!0,openFrom:"#"+r.identifier,closeTo:"#"+r.identifier,templateUrl:n.templatePath("item-properties-modal"),controller:"ItemPropertiesController",locals:{item:r}}):!1}return{open:r}}n.filemanager.service("CripPropertiesModal",t),t.$inject=["$mdDialog","$rootScope","CripManagerContent"]}(angular,window.crip),function(e,n){"use strict";function t(e){var n={};return function(t){return t?n[t]:{init:function(){n=e.get()}}}}n.filemanager.service("CripManagerTrans",t),t.$inject=["CripManagerTranslations"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,r,i){function a(n){e.forEach(n,function(n){n.progress=0,n.id=s.files.length,n.isHtml5=e.isHtml5,n.error=!1,s.files.push(n)})}function o(){return s.files.length>0}function c(){return o()?(s.settings.url.dir=t.toString.apply(t.current()),void e.forEach(s.files,u)):!1}function u(e){var n=i.upload({url:"{root}/{dir}".supplant(s.settings.url),data:{file:e}});n.then(function(n){e.progress=100,s.files.removeItem(e.id,"id"),r.add(n.data)},function(n){e.error=!0,e.progress=100},function(n){e.progress=Math.min(100,parseInt(90*n.loaded/n.total))})}function l(){s.files=[]}var s={files:[],add:a,hasFiles:o,start:c,clean:l,settings:{status:200,error:"",url:{root:n.fileUrl("upload"),dir:""}}};return s}n.filemanager.service("CripManagerUploader",t),t.$inject=["$rootScope","CripManagerBreadcrumb","CripManagerContent","Upload"]}(angular,window.crip),function(e,n){"use strict";function t(n,t,r,i){function a(){return!c._createInProgress}function o(i,o){return a()?(c._createInProgress=!0,void n.create(t.current(),{name:i},function(n){c._createInProgress=!1;var t=r.add(n);r.selectSingle(t),e.isFunction(o)&&o(t)})):!1}var c={_createInProgress:!1,canCreateFolder:a,createFolder:o};return c}n.filemanager.service("CreateFolderService",t),t.$inject=["Dir","CripManagerBreadcrumb","CripManagerContent","RenameService"]}(angular,window.crip),function(e,n){"use strict";function t(){function e(e){return e?!e.isDirUp:!1}function n(n){return e(n)?n["delete"]():!1}return{canDelete:e,"delete":n}}n.filemanager.service("DeleteService",t)}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(){function e(e){return e?!e.isDirUp:!1}function n(n){return e(n)?n.rename=!0:!1}function t(n){return e(n)?n.update():!1}return{canRename:e,enableRename:n,rename:t}}n.filemanager.service("RenameService",t)}(angular,window.crip),function(e,n){"use strict";function t(){function n(){return!!s.selected.length}function t(t){if(!n())return!1;var r=!1;return e.forEach(s.selected,function(n){e.equals(t,n)&&(r=!0)}),r}function r(){return 1===s.selected.length}function i(){return r()?s.selected[0]:!1}function a(){return s.selected}function o(e){s.selected.push(e)}function c(){l(),s.selected.splice(0,s.selected.length)}function u(e){c(),o(e)}function l(){e.forEach(a(),function(e){e.update()})}var s={selected:[],select:o,selectSingle:u,deselect:c,isSelected:t,isSelectedOne:r,isSelectedAny:n,getSelectedItem:i,getSelectedItems:a,updateSelected:l};return s}n.filemanager.service("SelectService",t)}(angular,window.crip);
//# sourceMappingURL=data:application/json;base64,
